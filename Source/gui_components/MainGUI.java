/*
 *
 */
package gui_components;

import data_structures.EmptyCollectionException;
import hospital_components.Bed;
import hospital_components.CareFacility;
import hospital_components.CasualEmployee;
import hospital_components.FullTimeEmployee;
import hospital_components.Patient;
import java.awt.CardLayout;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author John Verwolf
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form NewApplication
     */
    public MainGUI() {
        savePath = null;

        //bedCard components
        bedListAvailableIndexSelected = -1;
        bedListUnavailableIndexSelected = -1;

        //patientCard components
        patientIndexSelected = -1;

        //employeeCard components
        cEIndexSelected = -1;
        fTEIndexSelected = -1;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        start = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        startLoad = new javax.swing.JButton();
        startNew = new javax.swing.JButton();
        cardBeds = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        bedAvailable = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        bedLocation = new javax.swing.JTextField();
        bedName = new javax.swing.JTextField();
        bedNew = new javax.swing.JButton();
        bedUnavailable2 = new javax.swing.JCheckBox();
        bedEdit = new javax.swing.JButton();
        bedDelete = new javax.swing.JButton();
        bedModify = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        bedListA = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bedListU = new javax.swing.JList();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        cardPatients = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        patientNew = new javax.swing.JButton();
        patientPriority1 = new javax.swing.JSpinner();
        patientDelete = new javax.swing.JButton();
        patientEdit = new javax.swing.JButton();
        patientModify = new javax.swing.JCheckBox();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        cardEmployees = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cEList = new javax.swing.JList<>();
        jPanel10 = new javax.swing.JPanel();
        casualNew = new javax.swing.JButton();
        casualEdit = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        casualName = new javax.swing.JTextField();
        casualAvailable = new javax.swing.JCheckBox();
        casualPay1 = new javax.swing.JSpinner();
        casualDelete = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        cEList1 = new javax.swing.JList<>();
        jPanel11 = new javax.swing.JPanel();
        fullTimeNew = new javax.swing.JButton();
        fullTimeEdit = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        fullTimeName = new javax.swing.JTextField();
        fullTimePay = new javax.swing.JSpinner();
        fullTimeDelete = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cardReport = new javax.swing.JPanel();
        reportScrollArea = new javax.swing.JScrollPane();
        reportDisplay = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        editPatients = new javax.swing.JMenuItem();
        editBeds = new javax.swing.JMenuItem();
        editEmployees = new javax.swing.JMenuItem();
        reportsMenu = new javax.swing.JMenu();
        viewReport = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Hospital Management Utility File Chooser");
        fileChooser.setFileFilter(new MyCustomFilter());
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel1.setText("Hospital Management Utility");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setText("version 1.0");

        startLoad.setText("Load");
        startLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startLoadActionPerformed(evt);
            }
        });

        startNew.setText("New");
        startNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startLayout = new javax.swing.GroupLayout(start);
        start.setLayout(startLayout);
        startLayout.setHorizontalGroup(
            startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startLayout.createSequentialGroup()
                .addGroup(startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(startLayout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(startLoad)
                        .addGap(95, 95, 95)
                        .addComponent(startNew))
                    .addGroup(startLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        startLayout.setVerticalGroup(
            startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addGroup(startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(startLoad)
                    .addComponent(startNew))
                .addGap(220, 220, 220))
        );

        mainPanel.add(start, "start");

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Location:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 48, -1));

        bedAvailable.setSelected(true);
        bedAvailable.setText("Working Order");
        bedAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedAvailableActionPerformed(evt);
            }
        });
        jPanel1.add(bedAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, 20));

        jLabel4.setText("Name:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        bedLocation.setText("Floor 1");
        jPanel1.add(bedLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 90, -1));

        bedName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedNameActionPerformed(evt);
            }
        });
        jPanel1.add(bedName, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 107, -1));

        bedNew.setText("New");
        bedNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedNewActionPerformed(evt);
            }
        });
        jPanel1.add(bedNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, -1, -1));

        bedUnavailable2.setText("Broken");
        bedUnavailable2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedUnavailable2ActionPerformed(evt);
            }
        });
        jPanel1.add(bedUnavailable2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, 13));

        bedEdit.setText("Edit");
        bedEdit.setEnabled(false);
        bedEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedEditActionPerformed(evt);
            }
        });
        jPanel1.add(bedEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, -1, -1));

        bedDelete.setText("Delete");
        bedDelete.setEnabled(false);
        bedDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(bedDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, -1, -1));

        bedModify.setText("Modify");
        bedModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedModifyActionPerformed(evt);
            }
        });
        jPanel1.add(bedModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        bedListA.setModel(new javax.swing.DefaultListModel());
        bedListA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bedListAMouseClicked(evt);
            }
        });
        bedListA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bedListAFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(bedListA);

        jLabel9.setText("Available:");

        jLabel10.setText("Unavailable:");

        bedListU.setModel(new javax.swing.DefaultListModel());
        bedListU.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bedListUMouseClicked(evt);
            }
        });
        bedListU.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bedListUFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(bedListU);

        jTextArea6.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea6.setColumns(20);
        jTextArea6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea6.setRows(5);
        jTextArea6.setText(" \n To add a new bed, fill in the forms and press new.\n\n\n\n To edit a bed, first check Modify, then select\n the bed from the list. Fill in the forms and press\n edit.");
        jTextArea6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextArea6.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea6.setEnabled(false);
        jTextArea6.setFocusable(false);
        jScrollPane11.setViewportView(jTextArea6);

        javax.swing.GroupLayout cardBedsLayout = new javax.swing.GroupLayout(cardBeds);
        cardBeds.setLayout(cardBedsLayout);
        cardBedsLayout.setHorizontalGroup(
            cardBedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(cardBedsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cardBedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cardBedsLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(cardBedsLayout.createSequentialGroup()
                        .addGroup(cardBedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        cardBedsLayout.setVerticalGroup(
            cardBedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardBedsLayout.createSequentialGroup()
                .addGroup(cardBedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cardBedsLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addGroup(cardBedsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
        );

        mainPanel.add(cardBeds, "cardBeds");

        patientList.setModel(new javax.swing.DefaultListModel());
        patientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(patientList);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel20.setText("Priority from 0  (low) to 10( high):");
        jPanel3.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        jLabel21.setText("Name:");
        jPanel3.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

        patientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameActionPerformed(evt);
            }
        });
        jPanel3.add(patientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 107, -1));

        patientNew.setText("New");
        patientNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNewActionPerformed(evt);
            }
        });
        jPanel3.add(patientNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));

        patientPriority1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        jPanel3.add(patientPriority1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 40, -1));

        patientDelete.setText("Delete");
        patientDelete.setEnabled(false);
        patientDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientDeleteActionPerformed(evt);
            }
        });
        jPanel3.add(patientDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, -1, -1));

        patientEdit.setText("Edit");
        patientEdit.setEnabled(false);
        patientEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEditActionPerformed(evt);
            }
        });
        jPanel3.add(patientEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        patientModify.setText("Modify");
        patientModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientModifyActionPerformed(evt);
            }
        });
        jPanel3.add(patientModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, -1));

        jTextArea4.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText(" \n To add a new employee, fill in the forms and press new.\n\n\n\n To edit an employee, first check Modify, then select\n the employee from the list. Fill in the forms and press\n edit.");
        jTextArea4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextArea4.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea4.setEnabled(false);
        jTextArea4.setFocusable(false);
        jScrollPane9.setViewportView(jTextArea4);

        jTextArea5.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea5.setRows(5);
        jTextArea5.setText(" \n To add a new patient, fill in the forms and press new.\n\n\n\n To edit a patient, first check Modify, then select\n the patient from the list. Fill in the forms and press\n edit.");
        jTextArea5.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jTextArea5.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea5.setEnabled(false);
        jTextArea5.setFocusable(false);
        jScrollPane10.setViewportView(jTextArea5);

        javax.swing.GroupLayout cardPatientsLayout = new javax.swing.GroupLayout(cardPatients);
        cardPatients.setLayout(cardPatientsLayout);
        cardPatientsLayout.setHorizontalGroup(
            cardPatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
            .addGroup(cardPatientsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(cardPatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cardPatientsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        cardPatientsLayout.setVerticalGroup(
            cardPatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardPatientsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cardPatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
            .addGroup(cardPatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cardPatientsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        mainPanel.add(cardPatients, "cardPatients");

        cEList.setModel(new javax.swing.DefaultListModel());
        cEList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cEListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(cEList);

        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        casualNew.setText("New");
        casualNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                casualNewActionPerformed(evt);
            }
        });
        jPanel10.add(casualNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        casualEdit.setText("Edit");
        casualEdit.setEnabled(false);
        casualEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                casualEditActionPerformed(evt);
            }
        });
        jPanel10.add(casualEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jCheckBox1.setText("modify");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel10.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 67, -1));

        casualName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                casualNameActionPerformed(evt);
            }
        });
        jPanel10.add(casualName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 95, -1));

        casualAvailable.setSelected(true);
        casualAvailable.setText("available");
        jPanel10.add(casualAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 87, -1));

        casualPay1.setModel(new javax.swing.SpinnerNumberModel(25.0d, 10.25d, 100.0d, 0.1d));
        jPanel10.add(casualPay1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 94, -1));

        casualDelete.setText("Delete");
        casualDelete.setEnabled(false);
        casualDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                casualDeleteActionPerformed(evt);
            }
        });
        jPanel10.add(casualDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, -1, -1));

        jLabel11.setText("Name:");
        jPanel10.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel12.setText("Hourly Rate:");
        jPanel10.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        jTextArea3.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setText(" \n To add a new employee, fill in the forms and press new.\n\n\n\n To edit an employee, first check Modify, then select\n the employee from the list. Fill in the forms and press\n edit.");
        jTextArea3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextArea3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea3.setEnabled(false);
        jTextArea3.setFocusable(false);
        jScrollPane8.setViewportView(jTextArea3);

        jPanel10.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 6, 280, 120));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Casual Employees", jPanel5);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cEList1.setModel(new javax.swing.DefaultListModel());
        cEList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cEList1MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(cEList1);

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fullTimeNew.setText("New");
        fullTimeNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeNewActionPerformed(evt);
            }
        });
        jPanel11.add(fullTimeNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        fullTimeEdit.setText("Edit");
        fullTimeEdit.setEnabled(false);
        fullTimeEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeEditActionPerformed(evt);
            }
        });
        jPanel11.add(fullTimeEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jCheckBox2.setText("Modify");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel11.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 67, -1));

        fullTimeName.setText("Name");
        fullTimeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeNameActionPerformed(evt);
            }
        });
        jPanel11.add(fullTimeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 95, -1));

        fullTimePay.setModel(new javax.swing.SpinnerNumberModel(50000.0d, 0.0d, 500000.0d, 5000.0d));
        jPanel11.add(fullTimePay, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 94, -1));

        fullTimeDelete.setText("Delete");
        fullTimeDelete.setEnabled(false);
        fullTimeDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeDeleteActionPerformed(evt);
            }
        });
        jPanel11.add(fullTimeDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, -1, -1));

        jTextArea2.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText(" \n To add a new employee, fill in the forms and press new.\n\n\n\n To edit an employee, first check Modify, then select\n the employee from the list. Fill in the forms and press\n edit.");
        jTextArea2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextArea2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea2.setEnabled(false);
        jTextArea2.setFocusable(false);
        jScrollPane7.setViewportView(jTextArea2);

        jPanel11.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 6, 280, 120));

        jLabel13.setText("Name:");
        jPanel11.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel14.setText("Salary:");
        jPanel11.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 33, -1, -1));

        jTabbedPane1.addTab("Full Time Employees", jPanel4);

        javax.swing.GroupLayout cardEmployeesLayout = new javax.swing.GroupLayout(cardEmployees);
        cardEmployees.setLayout(cardEmployeesLayout);
        cardEmployeesLayout.setHorizontalGroup(
            cardEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        cardEmployeesLayout.setVerticalGroup(
            cardEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        mainPanel.add(cardEmployees, "cardEmployees");

        cardReport.setFocusable(false);

        reportDisplay.setColumns(20);
        reportDisplay.setRows(5);
        reportScrollArea.setViewportView(reportDisplay);

        javax.swing.GroupLayout cardReportLayout = new javax.swing.GroupLayout(cardReport);
        cardReport.setLayout(cardReportLayout);
        cardReportLayout.setHorizontalGroup(
            cardReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportScrollArea, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
        );
        cardReportLayout.setVerticalGroup(
            cardReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportScrollArea, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );

        mainPanel.add(cardReport, "cardReport");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");
        editMenu.setEnabled(false);
        editMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuActionPerformed(evt);
            }
        });

        editPatients.setText("Patients");
        editPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPatientsActionPerformed(evt);
            }
        });
        editMenu.add(editPatients);

        editBeds.setText("Beds");
        editBeds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBedsActionPerformed(evt);
            }
        });
        editMenu.add(editBeds);

        editEmployees.setText("Employees");
        editEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEmployeesActionPerformed(evt);
            }
        });
        editMenu.add(editEmployees);

        menuBar.add(editMenu);

        reportsMenu.setText("Overview");
        reportsMenu.setEnabled(false);

        viewReport.setText("Overview");
        viewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewReportActionPerformed(evt);
            }
        });
        reportsMenu.add(viewReport);

        menuBar.add(reportsMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void startLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startLoadActionPerformed
        fileOpenDialog(evt);
    }//GEN-LAST:event_startLoadActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fileOpenDialog(evt);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void editMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editMenuActionPerformed

    private void viewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReportActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "cardReport");
    }//GEN-LAST:event_viewReportActionPerformed

    private void editEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEmployeesActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "cardEmployees");
    }//GEN-LAST:event_editEmployeesActionPerformed

    private void editBedsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBedsActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "cardBeds");
    }//GEN-LAST:event_editBedsActionPerformed

    private void editPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPatientsActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "cardPatients");
    }//GEN-LAST:event_editPatientsActionPerformed

    private void startNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startNewActionPerformed
        newCF();

//        //instantiate care facility
//        try {
//            String name = JOptionPane.showInputDialog("Please enter a name for the carefacility", "CareFacility");
//            if (name != null) {
//                while (name != null && name.equals("")) { //promps user for valid non empty imput
//                    name = JOptionPane.showInputDialog("Please enter a name for the carefacility", "CareFacility");
//                }
//                if (!name.equals("")) {
//                    cF = new CareFacility(name);
//
//                    //enable menus
//                    reportsMenu.setEnabled(true);
//                    editMenu.setEnabled(true);
//
//                    //Default text for Name Text fields
//                    bedName.setText("Bed " + cF.getCountBeds());
//                    casualName.setText("Casual " + cF.getCountCE());
//                    fullTimeName.setText("Full Time " + cF.getCountFTE());
//                    patientName.setText("Patient " + cF.getCountP());
//
//                    //Update the Displays
//                    updateDisplays();
//                    
//                    CardLayout card = (CardLayout) mainPanel.getLayout();
//                    card.show(mainPanel, "cardPatients");
//                }
//            }
//        } catch (NullPointerException e) {
//        }
    }//GEN-LAST:event_startNewActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (savePath == null) {
            fileSaveDialog(evt);
        } else {
            cF.Save(savePath);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        fileSaveDialog(evt);
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void patientEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEditActionPerformed
        FunctionalityUtils.modifyPatients(cF, patientIndexSelected, patientName, patientPriority1);
        updateDisplays();
        patientIndexSelected = -1;
    }//GEN-LAST:event_patientEditActionPerformed

    private void patientDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientDeleteActionPerformed
        FunctionalityUtils.deletePatient(cF, patientIndexSelected);
        updateDisplays();
        patientIndexSelected = -1;
    }//GEN-LAST:event_patientDeleteActionPerformed


    private void patientListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListMouseClicked
        if (!isChanging && !patientList.isSelectionEmpty()) {
            isChanging = true; //flag to prevent listener conflicts 
            patientIndexSelected = patientList.getSelectedIndex() + 1; //value of number selected from jList            

            //Fill forms with data from selected patient
            try {
                Patient temp = cF.getCopyPatientStack().get(patientIndexSelected); //get a reference to the patient selected
                patientName.setText(temp.getName()); //set name text                
                patientPriority1.setValue(temp.getPriority()); //set location priority                  
                isChanging = false; //flag to prevent listener conflicts
            } catch (EmptyCollectionException e) {
                isChanging = false; //flag to prevent listener conflicts
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_patientListMouseClicked

    private void cEListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cEListMouseClicked
        if (!isChanging && !cEList.isSelectionEmpty()) {
            isChanging = true; //flag to prevent listener conflicts
            cEIndexSelected = cEList.getSelectedIndex() + 1;

            //Fill forms with data from selected bed
            try {
                CasualEmployee temp = cF.getCasualEmployee(cEIndexSelected);
                casualName.setText(temp.getName()); //set name text
                casualPay1.setValue(temp.getPayRate()); //set location priority
                casualAvailable.setSelected(temp.getAvailability());
                isChanging = false; //flag to prevent listener conflicts
            } catch (EmptyCollectionException e) {
                isChanging = false; //flag to prevent listener conflicts
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_cEListMouseClicked

    private void casualNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_casualNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_casualNameActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            casualEdit.setEnabled(true);
            casualDelete.setEnabled(true);
            casualNew.setEnabled(false);

        } else {
            casualEdit.setEnabled(false);
            casualDelete.setEnabled(false);
            casualNew.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void casualEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_casualEditActionPerformed
        FunctionalityUtils.modifyCasualEmployees(cF, cEIndexSelected, casualName, casualPay1, casualAvailable);
        updateDisplays();
        cEIndexSelected = -1;
    }//GEN-LAST:event_casualEditActionPerformed

    private void casualNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_casualNewActionPerformed
        String name = casualName.getText();
        double pay = (double) casualPay1.getValue();
        Boolean available = casualAvailable.isSelected();
        CasualEmployee cE = new CasualEmployee(name, available, pay);
        cF.addCasualEmployee(cE);
        updateDisplays();
        casualName.setText("Casual " + cF.getCountCE());
    }//GEN-LAST:event_casualNewActionPerformed

    private void casualDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_casualDeleteActionPerformed
        FunctionalityUtils.deleteCasualEmployee(cF, cEIndexSelected);
        updateDisplays();
        cEIndexSelected = -1;
    }//GEN-LAST:event_casualDeleteActionPerformed

    private void cEList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cEList1MouseClicked
        if (!isChanging && !cEList1.isSelectionEmpty()) {
            isChanging = true; //flag to prevent listener conflicts
            fTEIndexSelected = cEList1.getSelectedIndex() + 1;

            //Fill forms with data from selected bed
            try {
                FullTimeEmployee temp = cF.getFullTimeEmployee(fTEIndexSelected);
                fullTimeName.setText(temp.getName()); //set name text
                fullTimePay.setValue(temp.getGrossPay()); //set location priority                
                isChanging = false; //flag to prevent listener conflicts
            } catch (EmptyCollectionException e) {
                isChanging = false; //flag to prevent listener conflicts
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_cEList1MouseClicked

    private void fullTimeDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeDeleteActionPerformed
        FunctionalityUtils.deleteFullTimeEmployee(cF, fTEIndexSelected);
        updateDisplays();
        fTEIndexSelected = -1;
    }//GEN-LAST:event_fullTimeDeleteActionPerformed

    private void fullTimeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullTimeNameActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected()) {
            fullTimeEdit.setEnabled(true);
            fullTimeDelete.setEnabled(true);
            fullTimeNew.setEnabled(false);

        } else {
            fullTimeEdit.setEnabled(false);
            fullTimeDelete.setEnabled(false);
            fullTimeNew.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void fullTimeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeEditActionPerformed
        FunctionalityUtils.modifyFullTimeEmployees(cF, fTEIndexSelected, fullTimeName, fullTimePay);
        updateDisplays();
        fTEIndexSelected = -1;
    }//GEN-LAST:event_fullTimeEditActionPerformed

    private void fullTimeNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeNewActionPerformed
        String name = fullTimeName.getText();
        double pay = (double) fullTimePay.getValue();
        FullTimeEmployee fTE = new FullTimeEmployee(name, pay);
        cF.addFullTimeEmployee(fTE);
        updateDisplays();
        fullTimeName.setText("Full Time " + cF.getCountFTE());
    }//GEN-LAST:event_fullTimeNewActionPerformed

    private void patientNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNewActionPerformed
        String name = patientName.getText();
        int priority = (int) patientPriority1.getValue();
        Patient patient = new Patient(name, priority);
        cF.addPatient(patient);
        updateDisplays();
        patientName.setText("Patient " + cF.getCountP());
    }//GEN-LAST:event_patientNewActionPerformed

    private void patientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameActionPerformed

    private void patientModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientModifyActionPerformed
        if (patientModify.isSelected()) {
            patientEdit.setEnabled(true);
            patientDelete.setEnabled(true);
            patientNew.setEnabled(false);

        } else {
            patientEdit.setEnabled(false);
            patientDelete.setEnabled(false);
            patientNew.setEnabled(true);
        }
    }//GEN-LAST:event_patientModifyActionPerformed

    private void bedListUFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bedListUFocusGained
        bedListUSelect();
    }//GEN-LAST:event_bedListUFocusGained

    private void bedListUMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bedListUMouseClicked
        bedListUSelect();
    }//GEN-LAST:event_bedListUMouseClicked

    private void bedListAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bedListAFocusGained
        bedListASelect();
    }//GEN-LAST:event_bedListAFocusGained

    private void bedListAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bedListAMouseClicked
        bedListASelect();
    }//GEN-LAST:event_bedListAMouseClicked

    private void bedModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedModifyActionPerformed
        if (bedModify.isSelected()) {
            bedEdit.setEnabled(true);
            bedDelete.setEnabled(true);
            bedNew.setEnabled(false);

        } else {
            bedEdit.setEnabled(false);
            bedDelete.setEnabled(false);
            bedNew.setEnabled(true);
        }
    }//GEN-LAST:event_bedModifyActionPerformed

    private void bedDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedDeleteActionPerformed
        FunctionalityUtils.deleteBed(cF, bedListAvailableIndexSelected, bedListUnavailableIndexSelected);
        updateDisplays();
        bedListUnavailableIndexSelected = -1; //reset to unselected after modification
        bedListAvailableIndexSelected = -1; //reset to unselected after modification
    }//GEN-LAST:event_bedDeleteActionPerformed

    private void bedEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedEditActionPerformed
        FunctionalityUtils.modifyBeds(cF, bedListAvailableIndexSelected, bedListUnavailableIndexSelected, bedName, bedLocation, bedAvailable);
        updateDisplays();
        bedListUnavailableIndexSelected = -1; //reset to unselected after modification
        bedListAvailableIndexSelected = -1; //reset to unselected after modification
    }//GEN-LAST:event_bedEditActionPerformed

    private void bedUnavailable2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedUnavailable2ActionPerformed
        if (bedUnavailable2.isSelected()) {
            bedAvailable.setSelected(false);
        } else {
            bedAvailable.setSelected(true);
        }
    }//GEN-LAST:event_bedUnavailable2ActionPerformed

    /**
     * adds a bed to the care facility
     *
     * @param evt action event
     */
    private void bedNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedNewActionPerformed
        String name = bedName.getText();
        String location = bedLocation.getText();
        Boolean available = bedAvailable.isSelected();
        Bed bed = new Bed(name, location, available, null);
        cF.addBed(bed);
        updateDisplays();
        bedName.setText("Bed " + cF.getCountBeds());
    }//GEN-LAST:event_bedNewActionPerformed

    private void bedNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bedNameActionPerformed

    private void bedAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedAvailableActionPerformed
        if (bedAvailable.isSelected()) {
            bedUnavailable2.setSelected(false);
        } else {
            bedUnavailable2.setSelected(true);
        }
    }//GEN-LAST:event_bedAvailableActionPerformed

    /**
     * Updates all the reports (jLists) to show current information
     */
    private void updateDisplays() {
        FunctionalityUtils.updateBedDisplay(cF, bedListA, bedListU);
        FunctionalityUtils.updatePatientDisplay(cF, patientList);
        FunctionalityUtils.updateCasualDisplay(cF, cEList);
        FunctionalityUtils.updateFullTimeDisplay(cF, cEList1);
        FunctionalityUtils.updateReport(cF, reportDisplay);

    }

    /**
     *
     * gets the user input from the selected element in the jList, stores the
     * index to instance var, and populates the input fields with the selected
     * bed's information
     */
    private void bedListASelect() {
        if (!isChanging && !bedListA.isSelectionEmpty()) {
            isChanging = true; //flag to prevent listener conflicts
            bedListAvailableIndexSelected = bedListA.getSelectedIndex() + 1; //            
            bedListU.clearSelection(); //undo selection

            //Fill forms with data from selected bed            
            try {
                Bed temp = cF.getAvailableBed(bedListAvailableIndexSelected);
                bedName.setText(temp.getName()); //set name text
                bedLocation.setText(temp.getLocation()); //set location text                
                bedAvailable.setSelected(temp.getInWorkingOrder());
                bedUnavailable2.setSelected(!temp.getInWorkingOrder());
                isChanging = false; //flag to prevent listener conflicts
            } catch (EmptyCollectionException e) {
                isChanging = false; //flag to prevent listener conflicts
                System.out.println(e);
            }
            bedListUnavailableIndexSelected = -1;
        }
    }

    /**
     * gets the user input from the selected element in the jlist, stores it to
     * instance var, and populates the input fields with the selected bed's
     * information
     */
    private void bedListUSelect() {
        if (!isChanging && !bedListU.isSelectionEmpty()) {
            isChanging = true; //flag to prevent listener conflicts
            bedListUnavailableIndexSelected = bedListU.getSelectedIndex() + 1; //       
            bedListA.clearSelection(); //undo selection

            //Fill forms with data from selected bed            
            try {
                Bed temp = cF.getUnavailableBed(bedListUnavailableIndexSelected);
                bedName.setText(temp.getName()); //set name text
                bedLocation.setText(temp.getLocation()); //set location text                
                bedAvailable.setSelected(temp.getInWorkingOrder());
                bedUnavailable2.setSelected(!temp.getInWorkingOrder());
                isChanging = false; //flag to prevent listener conflicts
            } catch (EmptyCollectionException e) {
                isChanging = false; //flag to prevent listener conflicts
                System.out.println(e);
            }
            bedListAvailableIndexSelected = -1;
        }
    }

    /**
     * opens an file open dialog to open the specified file
     *
     * @param evt ActionEvent
     */
    private void fileOpenDialog(java.awt.event.ActionEvent evt) {
        File setDir = new File(".");                        //sets setDir to default file path
        fileChooser.setCurrentDirectory(setDir);            //set fileChooser to open at default file path

        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //get the file name
            String filename = fileChooser.getSelectedFile().toString();

            //ensure the file type is correct
            if (filename.endsWith(".cf")) {
                File openFile = new File(filename);
                try {
                    cF = CareFacility.load(openFile);

                    //set default savePath to the file path from filechooser
                    savePath = openFile;

                    //enable menus
                    reportsMenu.setEnabled(true);
                    editMenu.setEnabled(true);

                    //Default text for Name Text fields
                    bedName.setText("Bed " + cF.getCountBeds());
                    casualName.setText("Casual " + cF.getCountCE());
                    fullTimeName.setText("Full Time " + cF.getCountFTE());
                    patientName.setText("Patient " + cF.getCountP());

                    updateDisplays();

                    //set card to cardReport
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "cardReport");
                } catch (ClassNotFoundException | IOException e) {

                }
            }
        }
    }

    /**
     * opens a save dialog and saves the file to the specified location
     *
     * @param evt ActionEvent
     */
    private void fileSaveDialog(java.awt.event.ActionEvent evt) {
        File setDir = new File(".");                        //sets setDir to default file path
        fileChooser.setCurrentDirectory(setDir);            //set fileChooser to open at default file path

        int returnVal = fileChooser.showSaveDialog(this);   //get the return value of a save Dialog box

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //get the file name
            File tempPath = fileChooser.getSelectedFile();  //get file path from filechooser
            String filename = tempPath.toString();

            if (!filename.isEmpty() && !filename.startsWith(".")) { //sanitize imput
                if (!filename.endsWith(".cf")) {            //ensure the file type is correct
                    filename += ".cf";
                }
                //save CareFacility object to filepath specified by user
                File saveFile = new File(filename);
                cF.Save(saveFile);

                savePath = tempPath;    //set default savePath to the file path from filechooser
            }
        }
    }

    private void newCF() {
        //instantiate care facility
//        if (cF != null) {
//            JOptionPane optionPane = new JOptionPane(
//                    "Do you want to save before Exiting?",
//                    JOptionPane.QUESTION_MESSAGE,
//                    JOptionPane.YES_NO_OPTION);
//            
//            if (JOptionPane.CANCEL_OPTION == optionPane){
//                
//            }
//        }
        
        try {
            String name = JOptionPane.showInputDialog("Please enter a name for the carefacility", "CareFacility");
            if (name != null) {
                while (name != null && name.equals("")) { //promps user for valid non empty imput
                    name = JOptionPane.showInputDialog("Please enter a name for the carefacility", "CareFacility");
                }
                if (!name.equals("")) {
                    cF = new CareFacility(name);

                    //enable menus
                    reportsMenu.setEnabled(true);
                    editMenu.setEnabled(true);

                    //Default text for Name Text fields
                    bedName.setText("Bed " + cF.getCountBeds());
                    casualName.setText("Casual " + cF.getCountCE());
                    fullTimeName.setText("Full Time " + cF.getCountFTE());
                    patientName.setText("Patient " + cF.getCountP());

                    //Update the Displays
                    updateDisplays();

                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "cardPatients");
                }
            }
        } catch (NullPointerException e) {
        }
    }

    /**
     * Internal class that filters what files can be chosen by the jFileChooser
     */
    class MyCustomFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".cf" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".cf");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,            
            return "Care Facility File (*.cf)";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
    //Holds the filepath for the save feature
    private File savePath;

    private CareFacility cF;

    //for bedCard
    private int bedListAvailableIndexSelected; //To distinguish which jlist selected
    private int bedListUnavailableIndexSelected; //To distinguish which jlist selected

    //for patientCard
    private int patientIndexSelected;

    //for emloyeeCard
    private int cEIndexSelected;
    private int fTEIndexSelected;

    //flag to prevent listener conflics    
    boolean isChanging = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bedAvailable;
    private javax.swing.JButton bedDelete;
    private javax.swing.JButton bedEdit;
    private javax.swing.JList bedListA;
    private javax.swing.JList bedListU;
    private javax.swing.JTextField bedLocation;
    private javax.swing.JCheckBox bedModify;
    private javax.swing.JTextField bedName;
    private javax.swing.JButton bedNew;
    private javax.swing.JCheckBox bedUnavailable2;
    private javax.swing.JList<String> cEList;
    private javax.swing.JList<String> cEList1;
    private javax.swing.JPanel cardBeds;
    private javax.swing.JPanel cardEmployees;
    private javax.swing.JPanel cardPatients;
    private javax.swing.JPanel cardReport;
    private javax.swing.JCheckBox casualAvailable;
    private javax.swing.JButton casualDelete;
    private javax.swing.JButton casualEdit;
    private javax.swing.JTextField casualName;
    private javax.swing.JButton casualNew;
    private javax.swing.JSpinner casualPay1;
    private javax.swing.JMenuItem editBeds;
    private javax.swing.JMenuItem editEmployees;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editPatients;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fullTimeDelete;
    private javax.swing.JButton fullTimeEdit;
    private javax.swing.JTextField fullTimeName;
    private javax.swing.JButton fullTimeNew;
    private javax.swing.JSpinner fullTimePay;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton patientDelete;
    private javax.swing.JButton patientEdit;
    private javax.swing.JList patientList;
    private javax.swing.JCheckBox patientModify;
    private javax.swing.JTextField patientName;
    private javax.swing.JButton patientNew;
    private javax.swing.JSpinner patientPriority1;
    private javax.swing.JTextArea reportDisplay;
    private javax.swing.JScrollPane reportScrollArea;
    private javax.swing.JMenu reportsMenu;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel start;
    private javax.swing.JButton startLoad;
    private javax.swing.JButton startNew;
    private javax.swing.JMenuItem viewReport;
    // End of variables declaration//GEN-END:variables

}
